package com.cranajit.UMS.filter;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.cranajit.UMS.utils.JWTUtils;

@Component
public class RequestFilter extends OncePerRequestFilter{
	
	@Autowired
	private UserDetailsService userDetailsService;
	
	@Autowired
	private JWTUtils jwtUtils;

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		String token = request.getHeader("Authorization");
		String username = null;
		String jwtToken = null;
		System.out.println("FILTER: "+token);

		if(token!=null && token.startsWith("Bearer ")) {
			jwtToken = token.substring(7);
			username = jwtUtils.getUserName(jwtToken);
			
			System.out.println("FILTER t: "+username);
			System.out.println("FILTER t: "+jwtToken);
			if(username!=null && SecurityContextHolder.getContext().getAuthentication() != null) {
				System.out.println("FILTER: "+username);
				System.out.println("FILTER: "+jwtToken);

				UserDetails userDetails = userDetailsService.loadUserByUsername(username);
				if(jwtUtils.validation(jwtToken, userDetails)) {
					System.out.println("FILTER: "+username);
					UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = 
							new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
					usernamePasswordAuthenticationToken.setDetails(
							new WebAuthenticationDetailsSource().buildDetails(request));
					SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
				}
			}
		}
		filterChain.doFilter(request, response);
	}
}
